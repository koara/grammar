/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. koara.jj */
/*@egen*/options {                            IGNORE_CASE=true;                                            STATIC = false;  UNICODE_INPUT = true;               }
PARSER_BEGIN(Koara)
package io.koara;
import java.util.Arrays;
public class Koara/*@bgen(jjtree)*/implements KoaraTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTKoaraState jjtree = new JJTKoaraState();

/*@egen*/    private int currentBlockLevel = 0;    private int currentQuoteLevel = 0;	private boolean blockAhead(int blockBeginColumn) {		int quoteLevel;	            if(getToken(1).kind == EOL) {          Token t;          int i = 2;          quoteLevel=0;          do {              quoteLevel=0;              do {                t = getToken(i++);                if(t.kind == GT) {                  if(t.beginColumn == 1 && currentBlockLevel > 0 && currentQuoteLevel == 0)  {                   System.out.println("> blockAhead >> false (1)");        		   return false;                  }                  quoteLevel++;                }              } while(t.kind == GT || t.kind == SPACE || t.kind == TAB);              if(quoteLevel > currentQuoteLevel) {                System.out.println("> blockAhead >> true (2)");                return true;              }              if(quoteLevel < currentQuoteLevel) {                System.out.println("> blockAhead >> false (3)");                return false;              }          } while(t.kind == EOL);          boolean result = t.kind != EOF && (currentBlockLevel == 0 || t.beginColumn >= blockBeginColumn + 2) ;          System.out.println("> blockAhead >> " + result + " (4)");          return result;        }        System.out.println("> blockAhead >> false (5)");        return false;    }	private boolean multilineAhead(Integer token) {      if(getToken(1).kind == token && getToken(2).kind != token && getToken(2).kind != EOL) {    	for(int i=2;;i++) {          Token t = getToken(i);          if(t.kind == token) {            System.out.println("> multilineAhead >> true (1)");                        return true;          } else if(t.kind == EOL) {                          i = skip(i+1, SPACE, TAB);                          int quoteLevel = newQuoteLevel(i);                      if(quoteLevel == currentQuoteLevel) {                          i = skip(i, SPACE, TAB, GT);                          if(getToken(i).kind == token                        		  || getToken(i).kind == EOL                                  || getToken(i).kind == DASH                                  || (getToken(i).kind == DIGITS && getToken(i+1).kind == DOT)                                  || (getToken(i).kind == BACKTICK && getToken(i+1).kind == BACKTICK && getToken(i+2).kind == BACKTICK)                                  || headingAhead(i)) {                              System.out.println("> multilineAhead >> false (2)");                        	  return false;                          }                      } else {                          System.out.println("> multilineAhead >> false (3)");                    	  return false;                      }          } else if(t.kind == EOF) {            System.out.println("> multilineAhead >> false (4)");            return false;          }        }      }      System.out.println("> multilineAhead >> false (5)");      return false;    }    private boolean fencesAhead() {	    if(getToken(1).kind == EOL) {	      int i = skip(2, SPACE, TAB, GT);	      if(getToken(i).kind == BACKTICK && getToken(i+1).kind == BACKTICK && getToken(i+2).kind == BACKTICK) {	    	 i = skip(i+3, SPACE, TAB);	    	 boolean result = getToken(i).kind == EOL || getToken(i).kind == EOF;	    	 System.out.println("> fencesAhead >> " + result + " (1)");	         return result;	      }	    }	     System.out.println("> fencesAhead >> false (2)");	    return false;    }    	private boolean headingAhead(int offset) {      if (getToken(offset).kind == EQ) {        int heading = 1;        for(int i=(offset + 1);;i++) {          if(getToken(i).kind != EQ) { System.out.println("> headingAhead >> true (1)"); return true; }          if(++heading > 6) { System.out.println("> headingAhead >> false (2)"); return false;}        }      }      System.out.println("> headingAhead >> false (3)");      return false;    }    private boolean listItemAhead(int listBeginColumn, boolean ordered) {        if(getToken(1).kind == EOL) {                for(int i=2, eol=1;;i++) {                        Token t = getToken(i);                        if(t.kind == EOL && ++eol > 2) {                          return false;                        } else if(t.kind != SPACE && t.kind != TAB && t.kind != GT && t.kind != EOL) {                            if(ordered) {                                boolean result = (t.kind == DIGITS && getToken(i+1).kind == DOT && t.beginColumn >= listBeginColumn);                                System.out.println("> listItemAhead >> " + result + " (1)");                                return result;                            }                            System.out.println("---");                            boolean result = t.kind == DASH && t.beginColumn >= listBeginColumn;                            System.out.println("> listItemAhead >> " + result + " (2)");                            return result;                        }                }        }        System.out.println("> listItemAhead >> false (3)");        return false;    }        private boolean textAhead() {      if(getToken(1).kind == EOL && getToken(2).kind != EOL) {          int i = skip(2, SPACE, TAB);		  int quoteLevel = newQuoteLevel(i);			if(quoteLevel == currentQuoteLevel) {			  i = skip(i, SPACE, TAB, GT);          	          Token t = getToken(i);	          boolean result = getToken(i).kind != EOL          			  && t.kind != DASH 	        		  && !(t.kind == DIGITS && getToken(i+1).kind == DOT)					  && !(getToken(i).kind == BACKTICK && getToken(i+1).kind == BACKTICK && getToken(i+2).kind == BACKTICK)	        		  && !headingAhead(i);	          System.out.println("> textAhead >> " + result + " (1)");	          return result;          }      }      System.out.println("> textAhead >> false (2)");      return false;    }    private boolean nextAfterSpace(Integer... tokens) {      int i = skip(1, SPACE, TAB);      return Arrays.asList(tokens).contains(getToken(i).kind);    }	private int newQuoteLevel(int offset) {	  int quoteLevel = 0;	  for(int i=offset;;i++) {		  Token t = getToken(i);		  if(t.kind == GT) { 			  quoteLevel++;	      } else if(t.kind != SPACE && t.kind != TAB) { 	    	  return quoteLevel;	      }		 	  }    }        private int skip(int offset, Integer... tokens) {      for(int i=offset;;i++) {        Token t = getToken(i);        if(t.kind == EOF || !Arrays.asList(tokens).contains(t.kind)) { return i; }      }    }  	}
PARSER_END(Koara)

TOKEN : {    <ASTERISK : "*">  | <BACKSLASH: "\\">  | <BACKTICK: "`">  | <CHAR_SEQUENCE: (~["*", "\\", "`", ":", "-", "0" - "9", ".", "=", ">", "[", "(", "<", "]", ")", "_", " ", "\t", "\r", "\n"])+>  | <COLON : ":">  | <DASH: "-">  | <DIGITS : (["0"-"9"])+>  | <DOT: ".">  | <EOL : (" " | "\t")* ("\r"|"\n"|"\r\n")>  | <EQ: "=">  | <ESCAPED_CHAR : "\\" ["*", "\\", "`", ":", "-", "0" - "9", ".", "=", ">", "[", "(", "<", "]", ")", "_"] >  | <GT: ">">  | <IMAGE_LABEL : "image:" >  | <LBRACK: "[">  | <LPAREN: "(">  | <LT: "<">  | <RBRACK: "]">  | <RPAREN: ")">  | <SPACE: " ">  | <TAB: "\t">  | <UNDERSCORE: "_">}

ASTDocument Document()           : {/*@bgen(jjtree) Document */
  ASTDocument jjtn000 = new ASTDocument(JJTDOCUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Document */
  try {
/*@egen*/  (LOOKAHEAD(1) <EOL>)*  WhiteSpace() [ BlockElement() (LOOKAHEAD({blockAhead(0)}) (<EOL> WhiteSpace())+ BlockElement())* (<EOL>)* WhiteSpace() ] <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void BlockElement() : {currentBlockLevel++;} { (     LOOKAHEAD({headingAhead(1)}) Heading()   | LOOKAHEAD(1) BlockQuote()   | LOOKAHEAD(1) UnorderedList()   | LOOKAHEAD(2) OrderedList()   | LOOKAHEAD(FencedCodeBlock()) FencedCodeBlock()   | Paragraph() )  { currentBlockLevel--; }}void Heading()          : {/*@bgen(jjtree) Heading */
                           ASTHeading jjtn000 = new ASTHeading(JJTHEADING);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; int heading=0;} {/*@bgen(jjtree) Heading */
  try {
/*@egen*/  (LOOKAHEAD(1) <EQ> {heading++;})+ WhiteSpace()  (    Text()    | LOOKAHEAD(Image()) Image()    | LOOKAHEAD(Link()) Link()    | LOOKAHEAD(Strong()) Strong()    | LOOKAHEAD(Em()) Em()    | LOOKAHEAD(Code()) Code()    | LooseChar()  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  { jjtn000.jjtSetValue(heading); }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void BlockQuote()             : {/*@bgen(jjtree) BlockQuote */
                                  ASTBlockQuote jjtn000 = new ASTBlockQuote(JJTBLOCKQUOTE);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
/*@egen*/ currentQuoteLevel++; } {/*@bgen(jjtree) BlockQuote */
  try {
/*@egen*/  <GT> (LOOKAHEAD(BlockQuoteEmptyLine() ) BlockQuoteEmptyLine())* WhiteSpace()  [ BlockElement()    (LOOKAHEAD({blockAhead(0)}) (<EOL> WhiteSpace() BlockQuotePrefix())+ BlockElement())*  ]  (LOOKAHEAD(BlockQuoteEmptyLine() <EOL>) BlockQuoteEmptyLine())*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  { currentQuoteLevel--; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void BlockQuotePrefix() : {int i=0;} {  (LOOKAHEAD({++i < currentQuoteLevel}) <GT> WhiteSpace())+}void BlockQuoteEmptyLine() : {} {  <EOL> WhiteSpace() (LOOKAHEAD(1) <GT> WhiteSpace())+ }void UnorderedList()       : {/*@bgen(jjtree) List */
                              ASTList jjtn000 = new ASTList(JJTLIST);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/int listBeginColumn;} {/*@bgen(jjtree) List */
  try {
/*@egen*/  listBeginColumn = UnorderedListItem() (LOOKAHEAD({listItemAhead(listBeginColumn, false)}) (<EOL>)+ (<GT>)* WhiteSpace() UnorderedListItem())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}int UnorderedListItem()           : {/*@bgen(jjtree) ListItem */
                                     ASTListItem jjtn000 = new ASTListItem(JJTLISTITEM);
                                     boolean jjtc000 = true;
                                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) ListItem */
  try {
/*@egen*/  t = <DASH> WhiteSpace() [ BlockElement() (LOOKAHEAD({blockAhead(t.beginColumn)}) (<EOL> WhiteSpace() [ LOOKAHEAD({currentQuoteLevel > 0}) BlockQuotePrefix() ] )+ BlockElement())* ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  { return t.beginColumn; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void OrderedList()       : {/*@bgen(jjtree) List */
                            ASTList jjtn000 = new ASTList(JJTLIST);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/int listBeginColumn;} {/*@bgen(jjtree) List */
  try {
/*@egen*/  listBeginColumn = OrderedListItem() (LOOKAHEAD({listItemAhead(listBeginColumn, true)}) (<EOL>)+ (<GT>)* WhiteSpace() OrderedListItem())*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  { jjtn000.setOrdered(true); }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}int OrderedListItem()           : {/*@bgen(jjtree) ListItem */
                                   ASTListItem jjtn000 = new ASTListItem(JJTLISTITEM);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) ListItem */
  try {
/*@egen*/  (t = <DIGITS>) <DOT> WhiteSpace() [ BlockElement() (LOOKAHEAD({blockAhead(t.beginColumn)}) (<EOL> WhiteSpace() [ LOOKAHEAD({currentQuoteLevel > 0}) BlockQuotePrefix() ] )+ BlockElement())* ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  { jjtn000.setNumber(Integer.valueOf(Integer.valueOf(t.image))); return t.beginColumn; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void FencedCodeBlock()            : {/*@bgen(jjtree) CodeBlock */
                                     ASTCodeBlock jjtn000 = new ASTCodeBlock(JJTCODEBLOCK);
                                     boolean jjtc000 = true;
                                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String language; StringBuilder s = new StringBuilder(); int beginColumn;} {/*@bgen(jjtree) CodeBlock */
  try {
/*@egen*/  t = <BACKTICK> {beginColumn = t.beginColumn;} <BACKTICK> (LOOKAHEAD(1) <BACKTICK>)+ WhiteSpace()   [LOOKAHEAD(1) (language = CodeLanguage())  { jjtn000.setLanguage(language);} ]  (LOOKAHEAD({getToken(1).kind != EOF && !fencesAhead()}) <EOL> LevelWhiteSpace(beginColumn))?  (	    t = <ASTERISK> 								{ s.append(t.image); }	  | t = <BACKSLASH> 							{ s.append(t.image); }	  | t = <CHAR_SEQUENCE> 						{ s.append(t.image); }	  | t = <COLON> 								{ s.append(t.image); }	  | t = <DASH> 									{ s.append(t.image); }	  | t = <DIGITS> 								{ s.append(t.image); }	  | t = <DOT> 									{ s.append(t.image); }	  | t = <EQ> 									{ s.append(t.image); }	  | t = <ESCAPED_CHAR> 							{ s.append(t.image); }	  | t = <IMAGE_LABEL> 							{ s.append(t.image); }	  | t = <LT>	 								{ s.append(t.image); }			  | t = <GT> 									{ s.append(t.image); }	  | t = <LBRACK> 								{ s.append(t.image); }	  | t = <RBRACK> 								{ s.append(t.image); }	  | t = <LPAREN> 								{ s.append(t.image); }	  | t = <RPAREN> 								{ s.append(t.image); }	  | t = <UNDERSCORE> 						    { s.append(t.image); }	  | t = <BACKTICK> 								{ s.append(t.image); }	  | LOOKAHEAD({!nextAfterSpace(EOL, EOF)}) (			t = <SPACE> 							{ s.append(t.image); }	  	  | t = <TAB> 								{ s.append("    "); }	  )	  | LOOKAHEAD({!fencesAhead()}) (t = <EOL> { s.append("\n"); } LevelWhiteSpace(beginColumn))  )*  [ LOOKAHEAD({ fencesAhead() }) <EOL> WhiteSpace() (<GT> WhiteSpace())* <BACKTICK> <BACKTICK> (LOOKAHEAD(1) <BACKTICK>)+ ]/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/{ jjtn000.jjtSetValue(s.toString()); }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void LevelWhiteSpace(int threshold) : {Token t; int currentPos=1;} {  (LOOKAHEAD(1) <GT>)*  (LOOKAHEAD({(getToken(1).kind == SPACE || getToken(1).kind == TAB) && currentPos < (threshold - 1)}) (        t = <SPACE> { currentPos = t.beginColumn; }      | t = <TAB> { currentPos = t.beginColumn; }    )  )*  }String CodeLanguage() : {Token t; StringBuilder s = new StringBuilder();} {  (LOOKAHEAD(1) (		t = <ASTERISK> 								{ s.append(t.image); }	  | t = <BACKSLASH> 							{ s.append(t.image); }	  | t = <CHAR_SEQUENCE> 						{ s.append(t.image); }	  | t = <COLON> 								{ s.append(t.image); }	  | t = <DASH> 									{ s.append(t.image); }	  | t = <DIGITS> 								{ s.append(t.image); }	  | t = <DOT> 									{ s.append(t.image); }	  | t = <EQ> 									{ s.append(t.image); }	  | t = <ESCAPED_CHAR> 							{ s.append(t.image); }	  | t = <IMAGE_LABEL> 							{ s.append(t.image); }	  | t = <LT>	 								{ s.append(t.image); }			  | t = <GT> 									{ s.append(t.image); }	  | t = <LBRACK> 								{ s.append(t.image); }	  | t = <RBRACK> 								{ s.append(t.image); }	  | t = <LPAREN> 								{ s.append(t.image); }	  | t = <RPAREN> 								{ s.append(t.image); }	  | t = <UNDERSCORE> 						    { s.append(t.image); }	  | t = <BACKTICK> 								{ s.append(t.image); }  )  )+  { return s.toString(); }}
void Paragraph()            : {/*@bgen(jjtree) Paragraph */
  ASTParagraph jjtn000 = new ASTParagraph(JJTPARAGRAPH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Paragraph */
  try {
/*@egen*/  Inline() (LOOKAHEAD({textAhead()}) LineBreak() WhiteSpace() (LOOKAHEAD(1) <GT> WhiteSpace())* Inline())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void Inline() : {} {
  (
      Text()    | LOOKAHEAD(Image()) Image()    | LOOKAHEAD(Link()) Link()    | LOOKAHEAD({multilineAhead(ASTERISK)}) StrongMultiline()    | LOOKAHEAD({multilineAhead(UNDERSCORE)}) EmMultiline()    | LOOKAHEAD({multilineAhead(BACKTICK)}) CodeMultiline()    | LooseChar()
  )+
}void Image()        : {/*@bgen(jjtree) Image */
                       ASTImage jjtn000 = new ASTImage(JJTIMAGE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/String ref = "";} {/*@bgen(jjtree) Image */
  try {
/*@egen*/  <LBRACK> WhiteSpace() <IMAGE_LABEL> WhiteSpace() (ResourceText() | LooseChar())+ WhiteSpace() <RBRACK> [ LOOKAHEAD(ResourceUrl()) (ref = ResourceUrl()) ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  { jjtn000.jjtSetValue(ref); }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Link()       : {/*@bgen(jjtree) Link */
                     ASTLink jjtn000 = new ASTLink(JJTLINK);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/String ref = "";} {/*@bgen(jjtree) Link */
  try {
/*@egen*/  <LBRACK> WhiteSpace() (LOOKAHEAD(Image()) (Image()) | LOOKAHEAD(Strong()) Strong() | LOOKAHEAD(Em()) Em() | LOOKAHEAD(Code()) Code() | ResourceText() | LooseChar())+ WhiteSpace() <RBRACK> [ LOOKAHEAD(ResourceUrl()) (ref = ResourceUrl()) ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  { jjtn000.jjtSetValue(ref); }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ResourceText()       : {/*@bgen(jjtree) Text */
                             ASTText jjtn000 = new ASTText(JJTTEXT);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; StringBuilder s = new StringBuilder();} {/*@bgen(jjtree) Text */
  try {
/*@egen*/  (LOOKAHEAD(2) (      t = <BACKSLASH> 					{ s.append(t.image); }    | t = <COLON>						{ s.append(t.image); }    | t = <CHAR_SEQUENCE>				{ s.append(t.image); }    | t = <DASH>						{ s.append(t.image); }    | t = <DIGITS>						{ s.append(t.image); }    | t = <DOT>							{ s.append(t.image); }    | t = <EQ>							{ s.append(t.image); }    | t = <ESCAPED_CHAR> 				{ s.append(t.image.substring(1)); }	| t = <IMAGE_LABEL>					{ s.append(t.image); }	| t = <GT>							{ s.append(t.image); }    | t = <LPAREN>						{ s.append(t.image); }    | t = <LT>							{ s.append(t.image); }    | t = <RPAREN>						{ s.append(t.image); }    | LOOKAHEAD({!nextAfterSpace(RBRACK)})     	(   t = <SPACE> 			{ s.append(t.image); }    	  | t = <TAB> 				{ s.append("    "); }    	)  	)  )+/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  { jjtn000.jjtSetValue(s.toString()); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String ResourceUrl() : {String ref = "";} {  <LPAREN> WhiteSpace() ref = ResourceUrlText() WhiteSpace() <RPAREN>  { return ref; }}String ResourceUrlText() : {Token t; StringBuilder s = new StringBuilder();} {  ( 		t = <ASTERISK> 								{ s.append(t.image); }      | t = <BACKSLASH> 							{ s.append(t.image); }      | t = <BACKTICK> 								{ s.append(t.image); }      | t = <CHAR_SEQUENCE> 						{ s.append(t.image); }      | t = <COLON>									{ s.append(t.image); }      | t = <DASH> 									{ s.append(t.image); }      | t = <DIGITS> 								{ s.append(t.image); }      | t = <DOT> 									{ s.append(t.image); }      | t = <EQ>									{ s.append(t.image); }      | t = <ESCAPED_CHAR> 							{ s.append(t.image.substring(1)); }      | t = <IMAGE_LABEL>							{ s.append(t.image); }      | t = <GT>									{ s.append(t.image); }      | t = <LBRACK> 								{ s.append(t.image); }      | t = <LPAREN> 								{ s.append(t.image); }	  | t = <LT>									{ s.append(t.image); }      | t = <RBRACK> 								{ s.append(t.image); }      | t = <UNDERSCORE> 							{ s.append(t.image); }      | LOOKAHEAD({!nextAfterSpace(RPAREN)}) (			t = <SPACE> 							{ s.append(t.image); }	  	  | t = <TAB> 								{ s.append("    "); }	    )  )*  { return s.toString(); }}void StrongMultiline()         : {/*@bgen(jjtree) Strong */
  ASTStrong jjtn000 = new ASTStrong(JJTSTRONG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Strong */
  try {
/*@egen*/  <ASTERISK> StrongMultilineContent() (LOOKAHEAD({textAhead()}) LineBreak() WhiteSpace() StrongMultilineContent())* <ASTERISK>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void StrongMultilineContent() : {Token t;} {  (      Text()    | LOOKAHEAD(Image()) Image()    | LOOKAHEAD(Link()) Link()    | LOOKAHEAD(Code()) Code()    | LOOKAHEAD(EmWithinStrongMultiline()) EmWithinStrongMultiline()    | t = <BACKTICK>/*@bgen(jjtree) Text */
                                                        {
                                                          ASTText jjtn001 = new ASTText(JJTTEXT);
                                                          boolean jjtc001 = true;
                                                          jjtree.openNodeScope(jjtn001);
                                                        }
                                                        try {
/*@egen*//*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn001, true);
                                                          jjtc001 = false;
                                                        }
/*@egen*/					{ jjtn001.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc001) {
                                                            jjtree.closeNodeScope(jjtn001, true);
                                                          }
                                                        }
/*@egen*/          | t = <LBRACK>/*@bgen(jjtree) Text */
                                                        {
                                                          ASTText jjtn002 = new ASTText(JJTTEXT);
                                                          boolean jjtc002 = true;
                                                          jjtree.openNodeScope(jjtn002);
                                                        }
                                                        try {
/*@egen*//*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn002, true);
                                                          jjtc002 = false;
                                                        }
/*@egen*/					{ jjtn002.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc002) {
                                                            jjtree.closeNodeScope(jjtn002, true);
                                                          }
                                                        }
/*@egen*/          | t = <UNDERSCORE>/*@bgen(jjtree) Text */
                                                        {
                                                          ASTText jjtn003 = new ASTText(JJTTEXT);
                                                          boolean jjtc003 = true;
                                                          jjtree.openNodeScope(jjtn003);
                                                        }
                                                        try {
/*@egen*//*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn003, true);
                                                          jjtc003 = false;
                                                        }
/*@egen*/					{ jjtn003.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc003) {
                                                            jjtree.closeNodeScope(jjtn003, true);
                                                          }
                                                        }
/*@egen*/        )+}void StrongWithinEmMultiline()         : {/*@bgen(jjtree) Strong */
  ASTStrong jjtn000 = new ASTStrong(JJTSTRONG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Strong */
  try {
/*@egen*/  <ASTERISK> StrongWithinEmMultilineContent() (LOOKAHEAD({textAhead()}) LineBreak() WhiteSpace() StrongWithinEmMultilineContent())* <ASTERISK>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void StrongWithinEmMultilineContent() : {Token t;} {  (      Text()    | LOOKAHEAD(Image()) Image()    | LOOKAHEAD(Link()) Link()    | LOOKAHEAD(Code()) Code()    | t = <BACKTICK>/*@bgen(jjtree) Text */
                                                        {
                                                          ASTText jjtn001 = new ASTText(JJTTEXT);
                                                          boolean jjtc001 = true;
                                                          jjtree.openNodeScope(jjtn001);
                                                        }
                                                        try {
/*@egen*//*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn001, true);
                                                          jjtc001 = false;
                                                        }
/*@egen*/					{ jjtn001.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc001) {
                                                            jjtree.closeNodeScope(jjtn001, true);
                                                          }
                                                        }
/*@egen*/          | t = <LBRACK>/*@bgen(jjtree) Text */
                                                                {
                                                                  ASTText jjtn002 = new ASTText(JJTTEXT);
                                                                  boolean jjtc002 = true;
                                                                  jjtree.openNodeScope(jjtn002);
                                                                }
                                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                                {
                                                                  jjtree.closeNodeScope(jjtn002, true);
                                                                  jjtc002 = false;
                                                                }
/*@egen*/						{ jjtn002.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                                                } finally {
                                                                  if (jjtc002) {
                                                                    jjtree.closeNodeScope(jjtn002, true);
                                                                  }
                                                                }
/*@egen*/          | t = <UNDERSCORE>/*@bgen(jjtree) Text */
                                                        {
                                                          ASTText jjtn003 = new ASTText(JJTTEXT);
                                                          boolean jjtc003 = true;
                                                          jjtree.openNodeScope(jjtn003);
                                                        }
                                                        try {
/*@egen*//*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn003, true);
                                                          jjtc003 = false;
                                                        }
/*@egen*/					{ jjtn003.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc003) {
                                                            jjtree.closeNodeScope(jjtn003, true);
                                                          }
                                                        }
/*@egen*/        )+}void Strong()         : {/*@bgen(jjtree) Strong */
                         ASTStrong jjtn000 = new ASTStrong(JJTSTRONG);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Strong */
  try {
/*@egen*/  <ASTERISK>  (      Text()    | LOOKAHEAD(Image()) Image()    | LOOKAHEAD(Link()) Link()    | LOOKAHEAD({multilineAhead(BACKTICK)}) CodeMultiline()    | LOOKAHEAD(EmWithinStrong()) EmWithinStrong()    | t = <BACKTICK>/*@bgen(jjtree) Text */
                                                        {
                                                          ASTText jjtn001 = new ASTText(JJTTEXT);
                                                          boolean jjtc001 = true;
                                                          jjtree.openNodeScope(jjtn001);
                                                        }
                                                        try {
/*@egen*//*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn001, true);
                                                          jjtc001 = false;
                                                        }
/*@egen*/					{ jjtn001.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc001) {
                                                            jjtree.closeNodeScope(jjtn001, true);
                                                          }
                                                        }
/*@egen*/          | t = <LBRACK>/*@bgen(jjtree) Text */
                                                                {
                                                                  ASTText jjtn002 = new ASTText(JJTTEXT);
                                                                  boolean jjtc002 = true;
                                                                  jjtree.openNodeScope(jjtn002);
                                                                }
                                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                                {
                                                                  jjtree.closeNodeScope(jjtn002, true);
                                                                  jjtc002 = false;
                                                                }
/*@egen*/						{ jjtn002.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                                                } finally {
                                                                  if (jjtc002) {
                                                                    jjtree.closeNodeScope(jjtn002, true);
                                                                  }
                                                                }
/*@egen*/          | t = <UNDERSCORE>/*@bgen(jjtree) Text */
                                                        {
                                                          ASTText jjtn003 = new ASTText(JJTTEXT);
                                                          boolean jjtc003 = true;
                                                          jjtree.openNodeScope(jjtn003);
                                                        }
                                                        try {
/*@egen*//*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn003, true);
                                                          jjtc003 = false;
                                                        }
/*@egen*/					{ jjtn003.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc003) {
                                                            jjtree.closeNodeScope(jjtn003, true);
                                                          }
                                                        }
/*@egen*/        )+  <ASTERISK>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void StrongWithinEm()         : {/*@bgen(jjtree) Strong */
                                 ASTStrong jjtn000 = new ASTStrong(JJTSTRONG);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Strong */
  try {
/*@egen*/  <ASTERISK>  (      Text()    | LOOKAHEAD(Image()) Image()    | LOOKAHEAD(Link()) Link()    | LOOKAHEAD(Code()) Code()    | t = <BACKTICK>/*@bgen(jjtree) Text */
                                                        {
                                                          ASTText jjtn001 = new ASTText(JJTTEXT);
                                                          boolean jjtc001 = true;
                                                          jjtree.openNodeScope(jjtn001);
                                                        }
                                                        try {
/*@egen*//*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn001, true);
                                                          jjtc001 = false;
                                                        }
/*@egen*/					{ jjtn001.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc001) {
                                                            jjtree.closeNodeScope(jjtn001, true);
                                                          }
                                                        }
/*@egen*/          | t = <LBRACK>/*@bgen(jjtree) Text */
                                                                {
                                                                  ASTText jjtn002 = new ASTText(JJTTEXT);
                                                                  boolean jjtc002 = true;
                                                                  jjtree.openNodeScope(jjtn002);
                                                                }
                                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                                {
                                                                  jjtree.closeNodeScope(jjtn002, true);
                                                                  jjtc002 = false;
                                                                }
/*@egen*/						{ jjtn002.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                                                } finally {
                                                                  if (jjtc002) {
                                                                    jjtree.closeNodeScope(jjtn002, true);
                                                                  }
                                                                }
/*@egen*/          | t = <UNDERSCORE>/*@bgen(jjtree) Text */
                                                        {
                                                          ASTText jjtn003 = new ASTText(JJTTEXT);
                                                          boolean jjtc003 = true;
                                                          jjtree.openNodeScope(jjtn003);
                                                        }
                                                        try {
/*@egen*//*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn003, true);
                                                          jjtc003 = false;
                                                        }
/*@egen*/					{ jjtn003.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc003) {
                                                            jjtree.closeNodeScope(jjtn003, true);
                                                          }
                                                        }
/*@egen*/        )+  <ASTERISK>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void EmMultiline()     : {/*@bgen(jjtree) Em */
  ASTEm jjtn000 = new ASTEm(JJTEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Em */
    try {
/*@egen*/    <UNDERSCORE> EmMultilineContent() (LOOKAHEAD({textAhead()}) LineBreak() WhiteSpace() EmMultilineContent())* <UNDERSCORE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/}void EmMultilineContent() : {Token t;} {  (      Text()    | LOOKAHEAD(Image()) Image()    | LOOKAHEAD(Link()) Link()    | LOOKAHEAD({multilineAhead(BACKTICK)}) CodeMultiline()    | LOOKAHEAD(StrongWithinEmMultiline()) StrongWithinEmMultiline()    | t = <ASTERISK>/*@bgen(jjtree) Text */
                                                        {
                                                          ASTText jjtn001 = new ASTText(JJTTEXT);
                                                          boolean jjtc001 = true;
                                                          jjtree.openNodeScope(jjtn001);
                                                        }
                                                        try {
/*@egen*//*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn001, true);
                                                          jjtc001 = false;
                                                        }
/*@egen*/					{ jjtn001.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc001) {
                                                            jjtree.closeNodeScope(jjtn001, true);
                                                          }
                                                        }
/*@egen*/          | t = <BACKTICK>/*@bgen(jjtree) Text */
                                                        {
                                                          ASTText jjtn002 = new ASTText(JJTTEXT);
                                                          boolean jjtc002 = true;
                                                          jjtree.openNodeScope(jjtn002);
                                                        }
                                                        try {
/*@egen*//*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn002, true);
                                                          jjtc002 = false;
                                                        }
/*@egen*/					{ jjtn002.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc002) {
                                                            jjtree.closeNodeScope(jjtn002, true);
                                                          }
                                                        }
/*@egen*/          | t = <LBRACK>/*@bgen(jjtree) Text */
                                                                {
                                                                  ASTText jjtn003 = new ASTText(JJTTEXT);
                                                                  boolean jjtc003 = true;
                                                                  jjtree.openNodeScope(jjtn003);
                                                                }
                                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                                {
                                                                  jjtree.closeNodeScope(jjtn003, true);
                                                                  jjtc003 = false;
                                                                }
/*@egen*/						{ jjtn003.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                                                } finally {
                                                                  if (jjtc003) {
                                                                    jjtree.closeNodeScope(jjtn003, true);
                                                                  }
                                                                }
/*@egen*/        )+}void EmWithinStrongMultiline()     : {/*@bgen(jjtree) Em */
  ASTEm jjtn000 = new ASTEm(JJTEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Em */
    try {
/*@egen*/    <UNDERSCORE> EmWithinStrongMultilineContent() (LOOKAHEAD({textAhead()}) LineBreak() WhiteSpace() EmWithinStrongMultilineContent())* <UNDERSCORE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/}void EmWithinStrongMultilineContent() : {Token t;} {  (      Text()    | LOOKAHEAD(Image()) Image()    | LOOKAHEAD(Link()) Link()    | LOOKAHEAD(Code()) Code()    | t = <ASTERISK>/*@bgen(jjtree) Text */
                                                        {
                                                          ASTText jjtn001 = new ASTText(JJTTEXT);
                                                          boolean jjtc001 = true;
                                                          jjtree.openNodeScope(jjtn001);
                                                        }
                                                        try {
/*@egen*//*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn001, true);
                                                          jjtc001 = false;
                                                        }
/*@egen*/					{ jjtn001.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc001) {
                                                            jjtree.closeNodeScope(jjtn001, true);
                                                          }
                                                        }
/*@egen*/          | t = <BACKTICK>/*@bgen(jjtree) Text */
                                                        {
                                                          ASTText jjtn002 = new ASTText(JJTTEXT);
                                                          boolean jjtc002 = true;
                                                          jjtree.openNodeScope(jjtn002);
                                                        }
                                                        try {
/*@egen*//*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn002, true);
                                                          jjtc002 = false;
                                                        }
/*@egen*/					{ jjtn002.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc002) {
                                                            jjtree.closeNodeScope(jjtn002, true);
                                                          }
                                                        }
/*@egen*/          | t = <LBRACK>/*@bgen(jjtree) Text */
                                                                {
                                                                  ASTText jjtn003 = new ASTText(JJTTEXT);
                                                                  boolean jjtc003 = true;
                                                                  jjtree.openNodeScope(jjtn003);
                                                                }
                                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                                {
                                                                  jjtree.closeNodeScope(jjtn003, true);
                                                                  jjtc003 = false;
                                                                }
/*@egen*/						{ jjtn003.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                                                } finally {
                                                                  if (jjtc003) {
                                                                    jjtree.closeNodeScope(jjtn003, true);
                                                                  }
                                                                }
/*@egen*/        )+}void Em()     : {/*@bgen(jjtree) Em */
                 ASTEm jjtn000 = new ASTEm(JJTEM);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Em */
  try {
/*@egen*/  <UNDERSCORE>  (      Text()    | LOOKAHEAD(Image()) Image()    | LOOKAHEAD(Link()) Link()    | LOOKAHEAD(Code()) Code()    | LOOKAHEAD(StrongWithinEm()) StrongWithinEm()    | t = <ASTERISK>/*@bgen(jjtree) Text */
                                                        {
                                                          ASTText jjtn001 = new ASTText(JJTTEXT);
                                                          boolean jjtc001 = true;
                                                          jjtree.openNodeScope(jjtn001);
                                                        }
                                                        try {
/*@egen*//*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn001, true);
                                                          jjtc001 = false;
                                                        }
/*@egen*/  					{ jjtn001.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc001) {
                                                            jjtree.closeNodeScope(jjtn001, true);
                                                          }
                                                        }
/*@egen*/          | t = <BACKTICK>/*@bgen(jjtree) Text */
                                                        {
                                                          ASTText jjtn002 = new ASTText(JJTTEXT);
                                                          boolean jjtc002 = true;
                                                          jjtree.openNodeScope(jjtn002);
                                                        }
                                                        try {
/*@egen*//*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn002, true);
                                                          jjtc002 = false;
                                                        }
/*@egen*/					{ jjtn002.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc002) {
                                                            jjtree.closeNodeScope(jjtn002, true);
                                                          }
                                                        }
/*@egen*/          | t = <LBRACK>/*@bgen(jjtree) Text */
                                                                {
                                                                  ASTText jjtn003 = new ASTText(JJTTEXT);
                                                                  boolean jjtc003 = true;
                                                                  jjtree.openNodeScope(jjtn003);
                                                                }
                                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                                {
                                                                  jjtree.closeNodeScope(jjtn003, true);
                                                                  jjtc003 = false;
                                                                }
/*@egen*/						{ jjtn003.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                                                } finally {
                                                                  if (jjtc003) {
                                                                    jjtree.closeNodeScope(jjtn003, true);
                                                                  }
                                                                }
/*@egen*/        )+  <UNDERSCORE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void EmWithinStrong()     : {/*@bgen(jjtree) Em */
                             ASTEm jjtn000 = new ASTEm(JJTEM);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Em */
  try {
/*@egen*/  <UNDERSCORE>  (      Text()    | LOOKAHEAD(Image()) Image()    | LOOKAHEAD(Link()) Link()    | LOOKAHEAD(Code()) Code()    | t = <ASTERISK>/*@bgen(jjtree) Text */
                                                        {
                                                          ASTText jjtn001 = new ASTText(JJTTEXT);
                                                          boolean jjtc001 = true;
                                                          jjtree.openNodeScope(jjtn001);
                                                        }
                                                        try {
/*@egen*//*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn001, true);
                                                          jjtc001 = false;
                                                        }
/*@egen*/					{ jjtn001.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc001) {
                                                            jjtree.closeNodeScope(jjtn001, true);
                                                          }
                                                        }
/*@egen*/          | t = <BACKTICK>/*@bgen(jjtree) Text */
                                                        {
                                                          ASTText jjtn002 = new ASTText(JJTTEXT);
                                                          boolean jjtc002 = true;
                                                          jjtree.openNodeScope(jjtn002);
                                                        }
                                                        try {
/*@egen*//*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn002, true);
                                                          jjtc002 = false;
                                                        }
/*@egen*/					{ jjtn002.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc002) {
                                                            jjtree.closeNodeScope(jjtn002, true);
                                                          }
                                                        }
/*@egen*/          | t = <LBRACK>/*@bgen(jjtree) Text */
                                                                {
                                                                  ASTText jjtn003 = new ASTText(JJTTEXT);
                                                                  boolean jjtc003 = true;
                                                                  jjtree.openNodeScope(jjtn003);
                                                                }
                                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                                {
                                                                  jjtree.closeNodeScope(jjtn003, true);
                                                                  jjtc003 = false;
                                                                }
/*@egen*/						{ jjtn003.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                                                } finally {
                                                                  if (jjtc003) {
                                                                    jjtree.closeNodeScope(jjtn003, true);
                                                                  }
                                                                }
/*@egen*/        )+  <UNDERSCORE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CodeMultiline()      : {/*@bgen(jjtree) Code */
  ASTCode jjtn000 = new ASTCode(JJTCODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Code */
        try {
/*@egen*/	<BACKTICK> CodeText() (LOOKAHEAD({textAhead()}) LineBreak() WhiteSpace() (LOOKAHEAD(1) <GT> WhiteSpace())* CodeText())* <BACKTICK>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void Code()      : {/*@bgen(jjtree) Code */
  ASTCode jjtn000 = new ASTCode(JJTCODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Code */
    try {
/*@egen*/    <BACKTICK> CodeText() <BACKTICK>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/}void CodeText()       : {/*@bgen(jjtree) Text */
                         ASTText jjtn000 = new ASTText(JJTTEXT);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; StringBuffer s = new StringBuffer();} {/*@bgen(jjtree) Text */
    try {
/*@egen*/    (	    t = <ASTERISK> 								{ s.append(t.image); }	  | t = <BACKSLASH> 							{ s.append(t.image); }      | t = <CHAR_SEQUENCE> 						{ s.append(t.image); }      | t = <COLON> 								{ s.append(t.image); }      | t = <DASH> 									{ s.append(t.image); }      | t = <DIGITS> 								{ s.append(t.image); }      | t = <DOT> 									{ s.append(t.image); }      | t = <EQ> 									{ s.append(t.image); }      | t = <ESCAPED_CHAR> 							{ s.append(t.image); }      | t = <IMAGE_LABEL> 							{ s.append(t.image); }      | t = <LT> 									{ s.append(t.image); }	  | t = <LBRACK> 								{ s.append(t.image); }      | t = <RBRACK> 								{ s.append(t.image); }      | t = <LPAREN> 								{ s.append(t.image); }      | t = <GT> 									{ s.append(t.image); }      | t = <RPAREN> 								{ s.append(t.image); }      | t = <UNDERSCORE> 						    { s.append(t.image); }      | LOOKAHEAD({!nextAfterSpace(EOL, EOF)}) (			t = <SPACE> 							{ s.append(t.image); }	  	  | t = <TAB> 								{ s.append("    "); }	  )    )+/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/    { jjtn000.jjtSetValue(s.toString()); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/}

void Text()       : {/*@bgen(jjtree) Text */
                     ASTText jjtn000 = new ASTText(JJTTEXT);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; StringBuffer s = new StringBuffer();} {/*@bgen(jjtree) Text */
  try {
/*@egen*/
  (LOOKAHEAD(1) (   		t = <BACKSLASH>								{ s.append(t.image);}
      | t = <CHAR_SEQUENCE> 						{ s.append(t.image);}      | t = <COLON>									{ s.append(t.image); }      | t = <DASH> 									{ s.append(t.image);}      | t = <DIGITS> 								{ s.append(t.image);}      | t = <DOT>									{ s.append(t.image);}      | t = <EQ>									{ s.append(t.image);}      | t = <ESCAPED_CHAR> 							{ s.append(t.image.substring(1)); }      | t = <GT>									{ s.append(t.image);}      | t = <IMAGE_LABEL> 							{ s.append(t.image); }      | t = <LPAREN>								{ s.append(t.image);}      | t = <LT>									{ s.append(t.image);}      | t = <RBRACK>								{ s.append(t.image);}      | t = <RPAREN>								{ s.append(t.image);}      | LOOKAHEAD({!nextAfterSpace(EOL, EOF)}) (				t = <SPACE> 						{ s.append(t.image); }		  	  | t = <TAB> 							{ s.append("    "); }	  )
    )  )+/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.jjtSetValue(s.toString()); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}void LooseChar()       : {/*@bgen(jjtree) Text */
                          ASTText jjtn000 = new ASTText(JJTTEXT);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Text */
  try {
/*@egen*/  (      t = <ASTERISK>    | t = <BACKTICK>    | t = <LBRACK>    | t = <UNDERSCORE>  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  { jjtn000.jjtSetValue(t.image); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 	}void LineBreak()            : {/*@bgen(jjtree) LineBreak */
                               ASTLineBreak jjtn000 = new ASTLineBreak(JJTLINEBREAK);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) LineBreak */
  try {
/*@egen*/  t = <EOL>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  { jjtn000.setExplicit(t.image.startsWith("  ")); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 	}void WhiteSpace() : {} {  (LOOKAHEAD (1) (<SPACE> | <TAB>))*}